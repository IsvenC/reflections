What happens when you initialize a repository? Why do you need to do it?

When you initialise you create the .git file that tracks all the commits. You
need to do that so that versions of your files are tracked and added.

$ git add <file>
e.g. $ git add helloworld.py

adds a file to the staging area.

'Changes to be committed' lists files to be added to the staging area

$ git reset <file>

removes the fu=ile from the staging area, but keeps it in your working directory
If you accidentally add a file to the staging area, you can remove it using git
reset. For example, if you accidentally add lesson_2_reflections.txt, but don’t
want it to be committed yet, run git reset lesson_2_reflections.txt and the file
will be removed from the staging area, but it will still be in your working
directory.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

The staging area offers a 'collection' of the latest version of all the files
that you want to commit at any one time. If you are a team working on a larger
project, each team member can add their changes to a staging area before
committing. It also makes it easy for you to see what will files be changed with
the commit you are planning.


$ git commit

This automatically opens Atom so that you can fill in a commit message.

$ git commit -m "Commit message"
You can also specify a commit message via the command line by running
git commit -m "Commit message" instead of just git commit. It's still a good
idea to get an editor set up, since this will make it easier to write long
commit messages that fully describe the change.

While commit message style varies from person to person, this style guide
describes some common best practices when writing commit messages:
http://udacity.github.io/git-styleguide/

the staging area is a copy of the most recent commit, until you add changes to
it.

$ git diff

git diff with no arguments will compare the working directory and the staging
area. This will show changes you've made that you haven't added to the staging
area yet.

$ git diff --staged

git diff --staged compares differences between the staging area and the latest
commit, and is often used right before committing, to check that the changes
really are what you want to commit.

$ git reset --hard
this discards any changes in the working directory OR staging area! You CANNOT
get your changes back in that case! so first check git diff and git diff --staged

$ git checkout master
checks out the master branch (i.e. the latest commit on the original branch)

How can you use the staging area to make sure you have one commit per logical
change?
You can use it to add all the different files that may be affected by a single
logical change. You can also use it to check against your latest committed files
to make sure that the changes are exactly the files and code that you want to
push through.

detached HEAD means you are looking at a commit that isn't labeled with a branch
name.

current last commit on the branch is the 'tip' of that branch

updating a branch will only commit to the branch you have checked out (*) and
leave all the others alone.

Making a branch
$ git branch

shows a list of your current branches and an asterisk next to the branch
currently checked out.

$ git branch branch-name

creates a branch with the name branch-name

$ git checkout branch-name

checks our the branch-name branch (which means that is the branch that will
change when you make commits)

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

When you want to create different versions of your solution but keep a production
code free from errors introduced by experimenting with the code
when you are doing 'anything different' - context switching, fixing bugs etc.

master = production qualuti branch that never breaks.

A common workflow is to make a new branch for every feature or bug fix when you
work with other people on a project. once you're "done" with a branch, you can
either update 'master' to point to the tip of the branch you've been working on,
or merge your branch with the master branch.

'remota branch' means you didn't create the branch yourself, but it behaves like
branches you've created yourself

$ git log --graph --oneline master branch-name
visualises the difference between branches
each commit knows about its parent.

git log starts with the current commit and traces back to a commit that doesn't
have a parent (usually the initial commit )

'HEAD' means the current commit. 'detached HEAD' means that the commit that is
checked out is not reachable,

$ git checkout -b new_branch_name

is equivalent to doing:
$ git branch new_branch_name
$ git checkout new_branch_name

How do the diagrams help you visualize the branch structure?
The visual tree diagrams help to understand how the struture of the commits
hang together, and which ones that directly follow on from each other.

$ git gc

If a branch is deleted and leaves some commits unreachable from existing
branches, those commits will continue to be accessible by commit id, until Git’s
garbage collection runs. This will happen automatically from time to time,
unless you actively turn it off. You can also run this process manually with
git gc.


Merging branches
Onve you have merged the branches, you can delete the branch label that you
have discarded. The merged commits will be shown by timestamp order after they
have been merged into the same branch.

Make sure you have the branch you want to merge into (master in this case)
checked out
$ git branch
$ git checkout master


$ git merge master new_branch_name

merges the new_branch_name with the master (your checked out branch) if no
conflicts are found.

$ git branch -d branch_name
deletes the branch called branch_name. This discards changes if you haven't
merged the deleted branch.

$ git show commit_id

shows the difference introduced by a commit compared to its parent commit.


What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

The result is one branch with a new tip of the branch you have merged into.
The combined branch has two parents since there are two branches pointing into
it.

Merge conflicts

when there are conflicts in the code, you will be shown both branches' versions
of the code as well as the 'common ancestor'.

you let git know that the conflict is solved by committing the resolution.

If you look at git status while you are still in the conflict stage, it will
show 'both modified <file_name>' as both branches have modified the file.
if you save and stage the file (after having fixed the conflicts) it will say
'all conflicts fixed but still merging'. Only after you commit the file will
the conflict be resolved and actual changes committed.

What are the pros and cons of Git’s automatic merging vs. always doing merges
manually?

Pros: quick when there are no conflicts (which otherwise would mean long code
reviews everytime a function or new code is added)

Cons: code isn't manually inspected and tested, so poor quality new code can
make its way into production if tests are not performed as standard.

COMMIT OFTEN! 
